from astropy.io import fits
import glob
import numpy as np
def ObsID_Tester(ObsID_L, Exposure_Time_Cutoff=10000):
    Subarray_Fail_L=[]
    Exposure_Time_Fail_L=[]
    Grating_Fail_L=[]
    Mode_Fail_L=[]
    Script_Fail_L=[]
    Fail_L=[]
    for ObsID in ObsID_L:
        obsid=ObsID
        try:
            #Evt2_Fpath_L = glob.glob("/Volumes/xray/simon/all_chandra_observations/" + str(obsid) + "/primary/*_evt2.fit*")
            try:
                Evt2_Fpath_L = glob.glob("/opt/xray/anthony/expansion_backup/ObsIDs/" + str(obsid) + "/new/*_evt2.fit*")
                Evt2_Fpath=Evt2_Fpath_L[0]
            except:
                Evt2_Fpath_L = glob.glob("/opt/xray/anthony/expansion_backup/ObsIDs/" + str(obsid) + "/primary/*_evt2.fit*")
                Evt2_Fpath=Evt2_Fpath_L[0]
            print("Evt2_Fpath: ", Evt2_Fpath)
            hdul = fits.open(Evt2_Fpath)
            #READMODE
            READMODE=hdul[1].header['READMODE']
            if(READMODE=="TIMED"):
                try:
                    Num_Rows_in_Array=hdul[1].header['NROWS'] #Num_Rows_in_Array:-int, Number of Row in the Array, The number of rows in a (sub)array, if less then 1024 then the observation is a subarray and will be removed from the sample
                except:
                    Num_Rows_in_Array=np.nan
                print("Num_Rows_in_Array : ", Num_Rows_in_Array)
            else:
                Num_Rows_in_Array=np.nan
            #print "type(Num_Rows_in_Array) : ", type(Num_Rows_in_Array)
            Exposure_Time=hdul[1].header['EXPOSURE'] #Exposure_Time:-float, Exposure Time, The Exposure Time of the observation (I think the longest time of all the chips) in seconds (not kiloseconds), If this is less the 5000s then the observation is invaild and will be removed from the sample
            print("Exposure_Time : ", Exposure_Time)
            #print "type(Exposure_Time) : ", type(Exposure_Time)
            Grating_Flag=hdul[1].header['GRATING']
            print("Grating_Flag : ", Grating_Flag)
            #READMODE
            #READMODE=hdul[1].header['READMODE']
            print("READMODE : ", READMODE)
            #if((Num_Rows_in_Array!=1024) or (Exposure_Time<5000) or (Grating_Flag!="NONE")): #Checks to see if the current observation is invaild (invalid if: it is a subarray or has an exposure time less then 5000s)
            if((Num_Rows_in_Array!=1024) or (Exposure_Time<Exposure_Time_Cutoff) or (Grating_Flag!="NONE") or (READMODE!="TIMED")): #Checks to see if the current observation is invaild (invalid if: it is a subarray or has an exposure time less then Exposure_Time_Cutoff)
                print("Warning Current Observaton Automatically Detected As Invalid ! ! !")
                Fail_L.append(ObsID)
            if((Num_Rows_in_Array!=1024)):
                print(str(ObsID)+": Subarray")
                Subarray_Fail_L.append(ObsID)
            #if((Exposure_Time<5000)):
            if((Exposure_Time<Exposure_Time_Cutoff)):
                Exposure_Time_Fail_L.append(ObsID)
                print(str(ObsID)+": Short Exposure Time")
            if((Grating_Flag!="NONE")):
                Grating_Fail_L.append(ObsID)
                print(str(ObsID)+": Grating")
            if(READMODE!="TIMED"):
                Mode_Fail_L.append(ObsID)
                print(str(ObsID)+": Non-Timed Mode")
        except:
            print("ERROR WITH OBSID "+str(obsid)+" !!!")
            Script_Fail_L.append(obsid)

    print("Fail_L:\n", Fail_L)
    print("len(Fail_L): ", len(Fail_L))
    print("Subarray_Fail_L:\n", Subarray_Fail_L)
    print("len(Subarray_Fail_L) :", len(Subarray_Fail_L))
    print("Exposure_Time_Fail_L:\n", Exposure_Time_Fail_L)
    print("len(Exposure_Time_Fail_L) : ", len(Exposure_Time_Fail_L))
    print("Grating_Fail_L:\n", Grating_Fail_L)
    print("len(Grating_Fail_L): ", len(Grating_Fail_L))
    print("Mode_Fail_L:\n", Mode_Fail_L)
    print("len(Mode_Fail_L): ", len(Mode_Fail_L))
    print("Script_Fail_L: ", Script_Fail_L)
    return Fail_L, Subarray_Fail_L, Exposure_Time_Fail_L, Grating_Fail_L, Mode_Fail_L

#All ObsIDs from Query (Old) (306 ObsIDs)
#print(ObsID_Tester(['10125', '1043', '10534', '10875', '10985', '10986', '11104', '11229', '11269', '11271', '11344', '11358', '11674', '11775', '11779', '11781', '11782', '11783', '11784', '11978', '11979', '11988', '11989', '12019', '12095', '12124', '12130', '12134', '12136', '12437', '12562', '12668', '12888', '12889', '12951', '12952', '12953', '12988', '12990', '12992', '12995', '13202', '13246', '13247', '13253', '13255', '13726', '13727', '13791', '13830', '13831', '13832', '14031', '14332', '14342', '14412', '15383', '15384', '1563', '1575', '1576', '1579', '1580', '1581', '1582', '1584', '1586', '1587', '16024', '1611', '1618', '1619', '1622', '1730', '1881', '1967', '1971', '1972', '2014', '2015', '2020', '2022', '2023', '2024', '2025', '2026', '2027', '2030', '2031', '2032', '2039', '2040', '2048', '2049', '2050', '2055', '2056', '2057', '2058', '2059', '2060', '2061', '2062', '2064', '2066', '2067', '2068', '2069', '2070', '2073', '2079', '2107', '2147', '2149', '2196', '2197', '2198', '2223', '2241', '2255', '2454', '2686', '2707', '2779', '2894', '2895', '2896', '2897', '2899', '2900', '2901', '2902', '2915', '2922', '2933', '2950', '2976', '3008', '3040', '3042', '3043', '3044', '308', '310', '311', '314', '3149', '3150', '321', '3217', '322', '3355', '350', '352', '354', '3550', '3551', '3554', '3717', '3718', '379', '3810', '383', '390', '3908', '3931', '3933', '3945', '3947', '3950', '3951', '3954', '4017', '404', '4169', '4177', '4360', '4372', '4404', '4536', '4541', '4613', '4628', '4629', '4630', '4631', '4632', '4633', '4688', '4689', '4725', '4726', '4732', '4736', '4741', '4742', '4743', '4747', '4748', '4750', '517', '5197', '5309', '5905', '5908', '5929', '5930', '5931', '5932', '5935', '5936', '5937', '5938', '5939', '5940', '5941', '5942', '5943', '5944', '5945', '5946', '5947', '5948', '5949', '6096', '6114', '6131', '6152', '6167', '6376', '6377', '6380', '6381', '6383', '6385', '6386', '6389', '6862', '6868', '6869', '6870', '6871', '6872', '6873', '7060', '7073', '7074', '7075', '7076', '7077', '7078', '7079', '7080', '7081', '7153', '7154', '7196', '7197', '7198', '7199', '7252', '735', '7635', '766', '768', '7848', '785', '7853', '786', '788', '793', '794', '797', '803', '8041', '8047', '805', '8050', '8057', '8063', '8107', '8182', '8210', '8507', '8554', '9100', '9120', '9121', '9122', '934', '9506', '9507', '9510', '952', '9527', '9530', '9532', '9535', '9540', '9546', '9548', '9550', '9551', '9552', '9553', '9810']))

print(ObsID_Tester([316, 318, 349, 350, 353, 354, 361, 378, 379, 380, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 400, 402, 404, 405, 407, 409, 410, 411, 413, 414, 735, 782, 784, 790, 792, 793, 794, 795, 797, 808, 864, 870, 871, 872, 882, 934, 942, 962, 963, 969, 1302, 1564, 1578, 1579, 1586, 1587, 1618, 1621, 1622, 1624, 1633, 1634, 1635, 1636, 1637, 1638, 1640, 2014, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2039, 2040, 2057, 2058, 2059, 2064, 2065, 2075, 2076, 2148, 2197, 2198, 2255, 2260, 2340, 2686, 2879, 2885, 2916, 2917, 2918, 2919, 2925, 2933, 2934, 2949, 2950, 2976, 2978, 3012, 3325, 3550, 3551, 3786, 3787, 3788, 3925, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3949, 3950, 3953, 3954, 3965, 4010, 4016, 4017, 4019, 4176, 4555, 4556, 4557, 4558, 4613, 4627, 4628, 4629, 4630, 4688, 4689, 4690, 4692, 4693, 4694, 4696, 4697, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 5197, 5283, 5296, 5297, 5300, 5301, 5302, 5309, 5322, 5323, 5337, 5338, 5339, 5340, 5619, 5644, 5905, 5911, 5929, 5930, 5931, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 6096, 6097, 6114, 6115, 6118, 6152, 6169, 6170, 6175, 6184, 6185, 6361, 6727, 6781, 6782, 7060, 7069, 7073, 7074, 7075, 7076, 7082, 7083, 7084, 7086, 7087, 7090, 7091, 7093, 7095, 7096, 7098, 7101, 7103, 7104, 7105, 7106, 7111, 7113, 7115, 7116, 7118, 7120, 7121, 7123, 7124, 7127, 7132, 7134, 7146, 7147, 7150, 7152, 7153, 7154, 7252, 7369, 7797, 7798, 7799, 7800, 7850, 7858, 7863, 7885, 8050, 8052, 8053, 8058, 8086, 8091, 8098, 8125, 8126, 8190, 8197, 8198, 8458, 8464, 8465, 8489, 8490, 9120, 9121, 9122, 9278, 9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539, 9540, 9541, 9542, 9543, 9545, 9546, 9547, 9548, 9549, 9550, 9551, 9552, 9553, 9570, 9805, 9877, 9883, 10025, 10026, 10027, 10125, 10274, 10275, 10276, 10277, 10278, 10279, 10280, 10281, 10289, 10290, 10291, 10292, 10293, 10542, 10543, 10544, 10545, 10559, 10560, 10722, 10723, 10724, 10725, 10726, 10868, 10875, 10925, 11032, 11033, 11034, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11104, 11260, 11268, 11272, 11273, 11289, 11295, 11309, 11311, 11317, 11761, 11782, 11786, 11800, 11846, 11847, 12095, 12155, 12156, 12238, 12239, 12301, 12437, 12473, 12562, 12668, 12696, 12748, 12978, 12981, 12992, 12993, 12994, 12995, 12996, 13018, 13202, 13241, 13248, 13303, 13304, 13439, 13686, 13728, 13765, 13791, 13796, 13812, 13813, 13814, 13815, 13816, 13817, 13819, 13820, 13821, 13822, 13829, 13830, 13831, 13832, 14017, 14018, 14230, 14231, 14332, 14341, 14342, 14349, 14350, 14351, 14376, 14378, 14383, 14384, 14412, 14419, 14437, 14442, 14471, 14675, 14676, 14795, 14801, 14896, 14902, 14912, 14984, 14985, 15149, 15190, 15200, 15294, 15295, 15333, 15382, 15384, 15386, 15387, 15496, 15553, 15572, 15574, 15579, 15582, 15587, 15588, 15589, 15594, 15603, 15616, 15646, 15756, 15760, 15771, 15803, 16000, 16001, 16002, 16003, 16005, 16023, 16024, 16028, 16029, 16032, 16033, 16068, 16069, 16121, 16122, 16234, 16260, 16261, 16262, 16276, 16277, 16484, 16485, 16556, 16580, 16745, 16969, 16978, 16983, 16991, 16994, 16995, 16996, 16997, 17000, 17003, 17007, 17032, 17155, 17180, 17461, 17462, 17471, 17472, 17547, 17569, 17570, 17571, 17578, 17678, 17890, 17891, 18047, 18048, 18053, 18054, 18062, 18063, 18064, 18065, 18066, 18067, 18068, 18069, 18070, 18071, 18072, 18073, 18340, 18341, 18342, 18343, 18352, 18440, 18454, 18455, 18461, 18462, 18760, 18875, 19297, 19304, 19339, 19344, 19345, 19346, 19348, 19350, 19351, 19354, 19357, 19363, 19374, 19386, 19387, 19392, 19393, 19394, 19397, 19403, 19407, 19411, 19414, 19416, 19417, 19421, 19422, 19428, 19437, 19497, 19521, 19522, 19524, 19747, 19748, 19981, 19982, 20333, 20343, 20353, 20356, 20495, 20585, 20752, 20753, 20794, 20965, 20966, 20992, 20993, 20997, 20998, 20999, 21000, 21001, 21003, 21036, 21077, 21082, 21230, 21350, 21351, 21352, 21384, 21471, 21472, 21473, 21474, 21479, 21545, 21639, 21640, 21647, 21648, 21649, 21698, 21699, 21853, 22189, 22194, 22372, 22375, 22478, 22479, 22480, 22481, 22482, 22714, 22715, 23075, 23076, 23140, 23141, 23216, 23217, 23218, 23219, 23220, 23223, 23266, 23472, 23473, 23474, 23475, 23476, 23477, 23478, 23479, 23480, 23481, 23482, 23483, 23484, 23485, 23486, 23487, 23488, 23489, 23490, 23491, 23492, 23493, 23494, 23495, 23496, 23497, 23498, 23499, 23500, 23501, 23559, 23561, 23564, 23599, 23638, 24392, 24393, 24438, 24439, 24440, 24441, 24442, 24707, 24979, 24980, 24981, 24986, 25179, 25186, 25191, 25689, 25989, 25990, 26038, 26039]))
